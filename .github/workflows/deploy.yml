# ====================================
# GITHUB ACTIONS - MAPO BACKEND DEPLOY
# ====================================
# Workflow para CI/CD automático del backend MAPO
# Incluye: Testing, Build, Docker, Deploy a DigitalOcean

name: 🚀 MAPO Backend - CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: registry.digitalocean.com
  IMAGE_NAME: mapo-backend

jobs:
  # ====================================
  # JOB 1: TESTING Y LINTING
  # ====================================
  test:
    name: 🧪 Tests & Code Quality
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ["3.9", "3.11"]
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: 📦 Cache Dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: 📥 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio black flake8 isort
        
    - name: 🔍 Code Linting (Black)
      run: black --check src/
      
    - name: 🔍 Code Linting (Flake8)
      run: flake8 src/
      
    - name: 🔍 Import Sorting (isort)
      run: isort --check-only src/
      
    - name: 🧪 Run Tests
      run: |
        export PYTHONPATH="${PYTHONPATH}:src"
        export ENVIRONMENT=testing
        export DATABASE_URL=sqlite:///./test.db
        pytest tests/ -v --tb=short
      
  # ====================================
  # JOB 2: SECURITY SCAN
  # ====================================
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🔒 Run Security Scan (Bandit)
      run: |
        pip install bandit
        bandit -r src/ -f json -o security-report.json || true
        
    - name: 📄 Upload Security Report
      uses: actions/upload-artifact@v3
      with:
        name: security-report
        path: security-report.json

  # ====================================
  # JOB 3: DOCKER BUILD
  # ====================================
  docker-build:
    name: 🐳 Docker Build & Push
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🔑 Login to DigitalOcean Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
        password: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
        
    - name: 🏷️ Extract Metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=raw,value=latest,enable={{is_default_branch}}
          type=sha,prefix={{branch}}-
          
    - name: 🔨 Build and Push Docker Image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./deployment/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # ====================================
  # JOB 4: DEPLOY TO DIGITALOCEAN
  # ====================================
  deploy:
    name: 🚀 Deploy to DigitalOcean
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🔑 Install doctl
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
        
    - name: 🏷️ Set Image Tag
      run: echo "IMAGE_TAG=sha-${GITHUB_SHA::7}" >> $GITHUB_ENV
      
    - name: 🚀 Deploy to App Platform
      run: |
        # Actualizar la app spec con la nueva imagen
        sed -i 's|image:.*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}|' deployment/app-spec.yaml
        doctl apps update ${{ secrets.DIGITALOCEAN_APP_ID }} --spec deployment/app-spec.yaml
        
    - name: ✅ Verify Deployment
      run: |
        # Esperar a que el despliegue termine
        sleep 60
        doctl apps get ${{ secrets.DIGITALOCEAN_APP_ID }}

  # ====================================
  # JOB 5: STAGING DEPLOY (DEVELOP BRANCH)
  # ====================================
  deploy-staging:
    name: 🧪 Deploy to Staging
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🔑 Install doctl
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
        
    - name: 🚀 Deploy to Staging
      run: |
        echo "🧪 Deploying to staging environment..."
        # Aquí puedes agregar comandos específicos para staging
        # Por ejemplo, desplegar a una app diferente para staging

  # ====================================
  # JOB 6: NOTIFICATION
  # ====================================
  notify:
    name: 📢 Notifications
    runs-on: ubuntu-latest
    needs: [deploy, deploy-staging]
    if: always()
    
    steps:
    - name: 📢 Notify Success
      if: needs.deploy.result == 'success' || needs.deploy-staging.result == 'success'
      run: |
        echo "✅ Deployment completed successfully!"
        # Aquí puedes agregar notificaciones (Slack, Discord, etc.)
        
    - name: 📢 Notify Failure
      if: needs.deploy.result == 'failure' || needs.deploy-staging.result == 'failure'
      run: |
        echo "❌ Deployment failed!"
        # Aquí puedes agregar notificaciones de error