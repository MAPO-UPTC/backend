name: MAPO Backend Deploy

on:
  push:
    branches: [ develop ]

env:
  PYTHON_VERSION: "3.9"

jobs:
  test:
    name: Tests and Linting
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Check with isort
      run: isort --check-only src/
      
    - name: Check with Black
      run: black --check src/
      
    - name: Lint with Flake8
      run: flake8 src/
      
    - name: Run tests
      run: |
        export PYTHONPATH="${PYTHONPATH}:src"
        export ENVIRONMENT=testing
        export DATABASE_URL=sqlite:///./test.db
        pytest tests/ -v || echo "No tests found"

  deploy:
    name: Deploy to DigitalOcean
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
      
    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.DROPLET_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.DROPLET_HOST }} >> ~/.ssh/known_hosts
        
    - name: Create deployment package
      run: |
        tar --ignore-failed-read -czf deployment.tar.gz \
          --exclude='.git' \
          --exclude='.github' \
          --exclude='__pycache__' \
          --exclude='*.pyc' \
          --exclude='*.pyo' \
          --exclude='.env' \
          --exclude='.env.*' \
          --exclude='venv' \
          --exclude='mapo' \
          --exclude='tests' \
          --exclude='*.log' \
          --exclude='logs' \
          --exclude='.pytest_cache' \
          --exclude='.mypy_cache' \
          --exclude='.coverage' \
          --exclude='*.egg-info' \
          --exclude='dist' \
          --exclude='build' \
          --exclude='.DS_Store' \
          --exclude='deployment.tar.gz' \
          .
        
    - name: Transfer to droplet
      run: scp deployment.tar.gz ${{ secrets.DROPLET_USER }}@${{ secrets.DROPLET_HOST }}:/tmp/
        
    - name: Deploy via SSH with Docker
      run: |
        ssh ${{ secrets.DROPLET_USER }}@${{ secrets.DROPLET_HOST }} << 'ENDSSH'
        set -e
        
        echo "🚀 Starting Docker deployment..."
        
        APP_DIR="/opt/mapo-backend"
        BACKUP_DIR="/opt/mapo-backend-backup"
        
        # Backup del código anterior
        if [ -d "$APP_DIR" ]; then
          echo "📦 Creating backup..."
          rm -rf $BACKUP_DIR
          cp -r $APP_DIR $BACKUP_DIR
        fi
        
        # Extraer archivos nuevos
        echo "📂 Extracting files..."
        mkdir -p $APP_DIR
        cd $APP_DIR
        tar -xzf /tmp/deployment.tar.gz
        rm /tmp/deployment.tar.gz
        
        # Crear archivo .env con todos los secrets
        echo "🔐 Creating .env file..."
        cat > .env << 'EOF'
        DATABASE_URL=${{ secrets.DATABASE_URL }}
        FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }}
        FIREBASE_PRIVATE_KEY_ID=${{ secrets.FIREBASE_PRIVATE_KEY_ID }}
        FIREBASE_PRIVATE_KEY="${{ secrets.FIREBASE_PRIVATE_KEY }}"
        FIREBASE_CLIENT_EMAIL=${{ secrets.FIREBASE_CLIENT_EMAIL }}
        FIREBASE_CLIENT_ID=${{ secrets.FIREBASE_CLIENT_ID }}
        FIREBASE_CLIENT_X509_CERT_URL=${{ secrets.FIREBASE_CLIENT_X509_CERT_URL }}
        FIREBASE_API_KEY=${{ secrets.FIREBASE_API_KEY }}
        FIREBASE_AUTH_DOMAIN=${{ secrets.FIREBASE_AUTH_DOMAIN }}
        FIREBASE_STORAGE_BUCKET=${{ secrets.FIREBASE_STORAGE_BUCKET }}
        FIREBASE_MESSAGING_SENDER_ID=${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}
        FIREBASE_APP_ID=${{ secrets.FIREBASE_APP_ID }}
        FIREBASE_DATABASE_URL=${{ secrets.FIREBASE_DATABASE_URL }}
        ENVIRONMENT=development
        DEBUG=true
        CORS_ORIGINS=http://localhost:3000,http://142.93.187.32,https://142.93.187.32.nip.io,https://mapo-dev.netlify.app
        SECRET_KEY=${{ secrets.SECRET_KEY }}
        EOF
        
        # Detener contenedor anterior si existe
        echo "🛑 Stopping existing container..."
        docker stop mapo-backend || true
        docker rm mapo-backend || true
        
        # Construir nueva imagen Docker
        echo "🐳 Building Docker image..."
        docker build -t mapo-backend:latest .
        
        # Iniciar nuevo contenedor
        echo "▶️  Starting new container..."
        docker run -d \
          --name mapo-backend \
          --restart unless-stopped \
          -p 8000:8000 \
          --env-file .env \
          mapo-backend:latest
        
        # Esperar a que el contenedor inicie
        echo "⏳ Waiting for container to start..."
        sleep 10
        
        # Verificar que el contenedor está corriendo
        echo "🔍 Checking container status..."
        docker ps | grep mapo-backend || echo "⚠️  Container not running!"
        
        # Ver logs del contenedor
        echo "📋 Container logs:"
        docker logs mapo-backend --tail 20
        
        # Limpiar imágenes antiguas
        echo "🧹 Cleaning up old images..."
        docker image prune -f
        
        echo "✅ Deployment completed!"
        
        ENDSSH
